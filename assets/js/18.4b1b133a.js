(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{433:function(t,e,s){"use strict";s.r(e);var a=s(55),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"client-stack-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#client-stack-example"}},[t._v("#")]),t._v(" Client Stack Example")]),t._v(" "),s("h3",{attrs:{id:"create"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create"}},[t._v("#")]),t._v(" Create")]),t._v(" "),s("p",[t._v("Let's say our app want's to create one container object and add two objects inside of it.")]),t._v(" "),s("p",[t._v("This can be done as follows:")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" container1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createEvee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" child1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" child2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" container2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createEvee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addExistingChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("container2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("These changes will create the perspectives on the top client (in memory).")]),t._v(" "),s("p",[t._v("So the data would look like this:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.google.com/drawings/d/e/2PACX-1vSb3y--4lN8A9if7pDb86V77QNL6ygB-R6FBtrpq1KnBIOg3z0BCToFTtR98Ymh-UvQFePKyR0z8YEn/pub?w=1600&a=2",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("4 new perspectives created on the OnMemory ClientMutation. Container 1 "),s("code",[t._v("c1")]),t._v(" has "),s("code",[t._v("k1")]),t._v(" and "),s("code",[t._v("k2")]),t._v(" as childrent, while "),s("code",[t._v("c2")]),t._v(" has "),s("code",[t._v("k1")]),t._v(" as a child. The ClientMutation essentially stores the head of each perspective, which are marked in blue.")]),t._v(" "),s("li",[t._v("8 new entities stored in the EntityCache of the EntityResolver. 4 entities represent the head commits and the other 4 are the data entities, which are included inside the commit object as a link.")])]),t._v(" "),s("p",[t._v("Calling the "),s("code",[t._v("diff()")]),t._v(" method on the ClientMutation will return an EveesMutation object with 4 elements in the "),s("code",[t._v("newPerspectives")]),t._v(" array. Each element will have the perspective payload, and the update details with the corresponding head.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n * diff = {\n *   newPerspectives: [\n *     {\n *       perspective: {\n *         hash: c1,\n *         object: ...\n *       },\n *       update: {\n *         details: {\n *           headId: hc1\n *         }\n *       }\n *     },\n *     ...\n *     A total of 4 perspectives would be listed in the "newPerspectives" array.\n *     ...\n *   ]\n * }/*\n')])])])]),s("h3",{attrs:{id:"flush"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flush"}},[t._v("#")]),t._v(" Flush")]),t._v(" "),s("p",[t._v("Let's now assume we want to persist these changes in our remotes. We can do this by calling the "),s("code",[t._v("flush()")]),t._v(" command. At this point these changes are removed from the "),s("code",[t._v("ClientMutation")]),t._v(" layer and sent to the "),s("code",[t._v("ClientRemote")]),t._v(" as a single "),s("code",[t._v("EveesMutation")]),t._v(" object.")]),t._v(" "),s("p",[t._v("The data would then look like this:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.google.com/drawings/d/e/2PACX-1vTE1pev577vbOwxW5zqQrmzJ1sc_t5uI0AU1WCcchUeLqarlelZ3WXX_2ZWHldbUxhQsxeJ32m8muoL/pub?w=1600&a=1",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"update"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" Update")]),t._v(" "),s("p",[t._v("Now let's consider the case where the app want's to update the content of a perspective, let's say add a new child. It can simply do it by calling")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" child3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addNewChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Because we have not flushed it, this operation is applied to the top layer ClientMutation only, which stores the changes on memory. Two things are done when adding a new child, a new perspective is created, and the parent is updated to add that new perspective as a child. The ClientMutation stored on the onMemory Client is then")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * diff = {\n *   newPerspectives: [\n *     {\n *       perspective: {\n *         hash: k3,\n *         object: ...\n *       },\n *       update: {\n *         details: {\n *           headId: hk1\n *         }\n *       }\n *     },\n *   ],\n *   updates: [\n *     {\n *       perspectiveId: c1,\n *       details: {\n*          headId: hc1-2\n *       }\n *     }\n *   ]\n * }/*\n")])])])]),s("p",[t._v("The data would then look like this:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.google.com/drawings/d/e/2PACX-1vSO9sFU9KFTRcem2GhvjqDfbxA1LCMg4dZCEpQMBNKb9yubQM0j2CnhiPBF7oQR1mMxIdCpav5ahAPB/pub?w=1600",alt:""}})])])}),[],!1,null,null,null);e.default=n.exports}}]);